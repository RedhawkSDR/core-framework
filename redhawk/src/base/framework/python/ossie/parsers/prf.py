#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is protected by Copyright. Please refer to the COPYRIGHT file
# distributed with this source distribution.
#
# This file is part of REDHAWK core.
#
# REDHAWK core is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# REDHAWK core is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.

#
# Generated Mon Jul 30 12:29:35 2018 by generateDS.py version 2.29.14.
# Python 2.7.5 (default, Nov  6 2016, 00:28:07)  [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)]
#
# Command line options:
#   ('-f', '')
#   ('--silence', '')
#   ('-m', '')
#   ('-o', 'ossie/parsers/prf.py')
#
# Command line arguments:
#   ../../../xml/xsd/prf.xsd
#
# Command line:
#   /usr/bin/generateDS.py -f --silence -m -o "ossie/parsers/prf.py" ../../../xml/xsd/prf.xsd
#
# Current working directory (os.getcwd()):
#   python
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info[0] == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info[0] == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info[0] == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class action(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_='external'):
        self.original_tagname_ = None
        self.type_ = _cast(None, type_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, action)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if action.subclass:
            return action.subclass(*args_, **kwargs_)
        else:
            return action(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    typeProp = property(get_type, set_type)
    def validate_ActionType(self, value):
        # Validate type ActionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ge', 'gt', 'external', 'le', 'lt', 'ne', 'eq']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ActionType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='action', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('action')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='action')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='action', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='action'):
        if self.type_ != "external" and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
    def exportChildren(self, outfile, level, namespace_='', name_='action', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
            self.validate_ActionType(self.type_)    # validate type ActionType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class action


class configurationKind(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, kindtype='configure'):
        self.original_tagname_ = None
        self.kindtype = _cast(None, kindtype)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, configurationKind)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if configurationKind.subclass:
            return configurationKind.subclass(*args_, **kwargs_)
        else:
            return configurationKind(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_kindtype(self): return self.kindtype
    def set_kindtype(self, kindtype): self.kindtype = kindtype
    kindtypeProp = property(get_kindtype, set_kindtype)
    def validate_StructPropertyConfigurationType(self, value):
        # Validate type StructPropertyConfigurationType, a restriction on PropertyConfigurationType.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['configure', 'allocation', 'factoryparam', 'test', 'event', 'message', 'property']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StructPropertyConfigurationType' % {"value" : value.encode("utf-8")} )
            value = str(value)
            enumerations = ['configure', 'execparam', 'allocation', 'factoryparam', 'test', 'event', 'message', 'property']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on StructPropertyConfigurationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='configurationKind', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('configurationKind')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='configurationKind')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='configurationKind', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='configurationKind'):
        if self.kindtype != "configure" and 'kindtype' not in already_processed:
            already_processed.add('kindtype')
            outfile.write(' kindtype=%s' % (quote_attrib(self.kindtype), ))
    def exportChildren(self, outfile, level, namespace_='', name_='configurationKind', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('kindtype', node)
        if value is not None and 'kindtype' not in already_processed:
            already_processed.add('kindtype')
            self.kindtype = value
            self.validate_StructPropertyConfigurationType(self.kindtype)    # validate type StructPropertyConfigurationType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class configurationKind


class enumeration(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, label=None, value=None):
        self.original_tagname_ = None
        self.label = _cast(None, label)
        self.value = _cast(None, value)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, enumeration)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if enumeration.subclass:
            return enumeration.subclass(*args_, **kwargs_)
        else:
            return enumeration(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_label(self): return self.label
    def set_label(self, label): self.label = label
    labelProp = property(get_label, set_label)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    valueProp = property(get_value, set_value)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='enumeration', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('enumeration')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumeration')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='enumeration', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumeration'):
        if self.label is not None and 'label' not in already_processed:
            already_processed.add('label')
            outfile.write(' label=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.label), input_name='label')), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='enumeration', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('label', node)
        if value is not None and 'label' not in already_processed:
            already_processed.add('label')
            self.label = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enumeration


class enumerations(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, enumeration=None):
        self.original_tagname_ = None
        if enumeration is None:
            self.enumeration = []
        else:
            self.enumeration = enumeration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, enumerations)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if enumerations.subclass:
            return enumerations.subclass(*args_, **kwargs_)
        else:
            return enumerations(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_enumeration(self): return self.enumeration
    def set_enumeration(self, enumeration): self.enumeration = enumeration
    def add_enumeration(self, value): self.enumeration.append(value)
    def insert_enumeration_at(self, index, value): self.enumeration.insert(index, value)
    def replace_enumeration_at(self, index, value): self.enumeration[index] = value
    enumerationProp = property(get_enumeration, set_enumeration)
    def hasContent_(self):
        if (
            self.enumeration
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='enumerations', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('enumerations')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumerations')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='enumerations', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumerations'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='enumerations', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for enumeration_ in self.enumeration:
            enumeration_.export(outfile, level, namespace_, name_='enumeration', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'enumeration':
            obj_ = enumeration.factory()
            obj_.build(child_)
            self.enumeration.append(obj_)
            obj_.original_tagname_ = 'enumeration'
# end class enumerations


class inputValue(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, simple=None):
        self.original_tagname_ = None
        if simple is None:
            self.simple = []
        else:
            self.simple = simple
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, inputValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if inputValue.subclass:
            return inputValue.subclass(*args_, **kwargs_)
        else:
            return inputValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_simple(self): return self.simple
    def set_simple(self, simple): self.simple = simple
    def add_simple(self, value): self.simple.append(value)
    def insert_simple_at(self, index, value): self.simple.insert(index, value)
    def replace_simple_at(self, index, value): self.simple[index] = value
    simpleProp = property(get_simple, set_simple)
    def hasContent_(self):
        if (
            self.simple
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='inputValue', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('inputValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='inputValue')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='inputValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='inputValue'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='inputValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for simple_ in self.simple:
            simple_.export(outfile, level, namespace_, name_='simple', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'simple':
            obj_ = simple.factory()
            obj_.build(child_)
            self.simple.append(obj_)
            obj_.original_tagname_ = 'simple'
# end class inputValue


class kind(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, kindtype='configure'):
        self.original_tagname_ = None
        self.kindtype = _cast(None, kindtype)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, kind)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if kind.subclass:
            return kind.subclass(*args_, **kwargs_)
        else:
            return kind(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_kindtype(self): return self.kindtype
    def set_kindtype(self, kindtype): self.kindtype = kindtype
    kindtypeProp = property(get_kindtype, set_kindtype)
    def validate_PropertyConfigurationType(self, value):
        # Validate type PropertyConfigurationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['configure', 'execparam', 'allocation', 'factoryparam', 'test', 'event', 'message', 'property']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PropertyConfigurationType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='kind', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('kind')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='kind')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='kind', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='kind'):
        if self.kindtype != "configure" and 'kindtype' not in already_processed:
            already_processed.add('kindtype')
            outfile.write(' kindtype=%s' % (quote_attrib(self.kindtype), ))
    def exportChildren(self, outfile, level, namespace_='', name_='kind', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('kindtype', node)
        if value is not None and 'kindtype' not in already_processed:
            already_processed.add('kindtype')
            self.kindtype = value
            self.validate_PropertyConfigurationType(self.kindtype)    # validate type PropertyConfigurationType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class kind


class properties(GeneratedsSuper):
    """The properties element (see Figure D-11) is used to describe
    property attributes that will be used in the configure( ) and
    query( ) operations for SCA CF Resource components and for
    definition of attributes used for dependency checking. The
    properties element can also used in the CF TestableObject
    runTest() operation to configure tests and provide test results."""
    subclass = None
    superclass = None
    def __init__(self, description=None, simple=None, simplesequence=None, test=None, struct=None, structsequence=None):
        self.original_tagname_ = None
        self.description = description
        if simple is None:
            self.simple = []
        else:
            self.simple = simple
        if simplesequence is None:
            self.simplesequence = []
        else:
            self.simplesequence = simplesequence
        if test is None:
            self.test = []
        else:
            self.test = test
        if struct is None:
            self.struct = []
        else:
            self.struct = struct
        if structsequence is None:
            self.structsequence = []
        else:
            self.structsequence = structsequence
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, properties)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if properties.subclass:
            return properties.subclass(*args_, **kwargs_)
        else:
            return properties(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    descriptionProp = property(get_description, set_description)
    def get_simple(self): return self.simple
    def set_simple(self, simple): self.simple = simple
    def add_simple(self, value): self.simple.append(value)
    def insert_simple_at(self, index, value): self.simple.insert(index, value)
    def replace_simple_at(self, index, value): self.simple[index] = value
    simpleProp = property(get_simple, set_simple)
    def get_simplesequence(self): return self.simplesequence
    def set_simplesequence(self, simplesequence): self.simplesequence = simplesequence
    def add_simplesequence(self, value): self.simplesequence.append(value)
    def insert_simplesequence_at(self, index, value): self.simplesequence.insert(index, value)
    def replace_simplesequence_at(self, index, value): self.simplesequence[index] = value
    simplesequenceProp = property(get_simplesequence, set_simplesequence)
    def get_test(self): return self.test
    def set_test(self, test): self.test = test
    def add_test(self, value): self.test.append(value)
    def insert_test_at(self, index, value): self.test.insert(index, value)
    def replace_test_at(self, index, value): self.test[index] = value
    testProp = property(get_test, set_test)
    def get_struct(self): return self.struct
    def set_struct(self, struct): self.struct = struct
    def add_struct(self, value): self.struct.append(value)
    def insert_struct_at(self, index, value): self.struct.insert(index, value)
    def replace_struct_at(self, index, value): self.struct[index] = value
    structProp = property(get_struct, set_struct)
    def get_structsequence(self): return self.structsequence
    def set_structsequence(self, structsequence): self.structsequence = structsequence
    def add_structsequence(self, value): self.structsequence.append(value)
    def insert_structsequence_at(self, index, value): self.structsequence.insert(index, value)
    def replace_structsequence_at(self, index, value): self.structsequence[index] = value
    structsequenceProp = property(get_structsequence, set_structsequence)
    def hasContent_(self):
        if (
            self.description is not None or
            self.simple or
            self.simplesequence or
            self.test or
            self.struct or
            self.structsequence
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='properties', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('properties')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='properties')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='properties', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='properties'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='properties', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<description>%s</description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), eol_))
        for simple_ in self.simple:
            simple_.export(outfile, level, namespace_, name_='simple', pretty_print=pretty_print)
        for simplesequence_ in self.simplesequence:
            simplesequence_.export(outfile, level, namespace_, name_='simplesequence', pretty_print=pretty_print)
        for test_ in self.test:
            test_.export(outfile, level, namespace_, name_='test', pretty_print=pretty_print)
        for struct_ in self.struct:
            struct_.export(outfile, level, namespace_, name_='struct', pretty_print=pretty_print)
        for structsequence_ in self.structsequence:
            structsequence_.export(outfile, level, namespace_, name_='structsequence', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
        elif nodeName_ == 'simple':
            obj_ = simple.factory()
            obj_.build(child_)
            self.simple.append(obj_)
            obj_.original_tagname_ = 'simple'
        elif nodeName_ == 'simplesequence':
            obj_ = simpleSequence.factory()
            obj_.build(child_)
            self.simplesequence.append(obj_)
            obj_.original_tagname_ = 'simplesequence'
        elif nodeName_ == 'test':
            obj_ = test.factory()
            obj_.build(child_)
            self.test.append(obj_)
            obj_.original_tagname_ = 'test'
        elif nodeName_ == 'struct':
            obj_ = struct.factory()
            obj_.build(child_)
            self.struct.append(obj_)
            obj_.original_tagname_ = 'struct'
        elif nodeName_ == 'structsequence':
            obj_ = structSequence.factory()
            obj_.build(child_)
            self.structsequence.append(obj_)
            obj_.original_tagname_ = 'structsequence'
# end class properties


class range_(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, max=None, min=None):
        self.original_tagname_ = None
        self.max = _cast(None, max)
        self.min = _cast(None, min)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, range_)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if range_.subclass:
            return range_.subclass(*args_, **kwargs_)
        else:
            return range_(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_max(self): return self.max
    def set_max(self, max): self.max = max
    maxProp = property(get_max, set_max)
    def get_min(self): return self.min
    def set_min(self, min): self.min = min
    minProp = property(get_min, set_min)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='range', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('range')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='range')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='range', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='range'):
        if self.max is not None and 'max' not in already_processed:
            already_processed.add('max')
            outfile.write(' max=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.max), input_name='max')), ))
        if self.min is not None and 'min' not in already_processed:
            already_processed.add('min')
            outfile.write(' min=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.min), input_name='min')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='range', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('max', node)
        if value is not None and 'max' not in already_processed:
            already_processed.add('max')
            self.max = value
        value = find_attr_value_('min', node)
        if value is not None and 'min' not in already_processed:
            already_processed.add('min')
            self.min = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class range_


class resultValue(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, simple=None):
        self.original_tagname_ = None
        if simple is None:
            self.simple = []
        else:
            self.simple = simple
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultValue.subclass:
            return resultValue.subclass(*args_, **kwargs_)
        else:
            return resultValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_simple(self): return self.simple
    def set_simple(self, simple): self.simple = simple
    def add_simple(self, value): self.simple.append(value)
    def insert_simple_at(self, index, value): self.simple.insert(index, value)
    def replace_simple_at(self, index, value): self.simple[index] = value
    simpleProp = property(get_simple, set_simple)
    def hasContent_(self):
        if (
            self.simple
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='resultValue', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resultValue')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='resultValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resultValue'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resultValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for simple_ in self.simple:
            simple_.export(outfile, level, namespace_, name_='simple', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'simple':
            obj_ = simple.factory()
            obj_.build(child_)
            self.simple.append(obj_)
            obj_.original_tagname_ = 'simple'
# end class resultValue


class simple(GeneratedsSuper):
    """The simple element (see Figure D-12) provides for the definition of
    a property which includes a unique id, type, name and mode
    attributes of the property that will be used in the CF Resource
    configure() and query() operations, for indication of component
    capabilities, or in the CF TestableObject runTest operation. The
    simple element is specifically designed to support idvalue pair
    definitions. A simple property id attribute corresponds to the
    id of the id-value pair. The value and range of a simple
    property correspond to the value of the id-value pair. If no
    value is given, then the property cannot be used for input test
    values for testing and/or as an initial configuration or execute
    parameter of a component. The optional enumerations element
    allows for the definition of a label-to-value for a particular
    property. The mode attribute defines whether the properties
    element is "readonly", "writeonly" or "readwrite". The id
    attribute is an identifier for the simple property element. The
    id attribute for a simple property that is an allocation type is
    a DCE UUID value, as specified in section D.2.1. The id
    attribute for all other simple property elements can be any
    valid XML ID type. The mode attribute is only meaningful when
    the type of the kind element is "configure"."""
    subclass = None
    superclass = None
    def __init__(self, id_=None, mode='readwrite', name=None, complex='false', commandline='false', optional='false', type_=None, description=None, value=None, units=None, range_=None, enumerations=None, kind=None, action=None):
        self.original_tagname_ = None
        self.id_ = _cast(None, id_)
        self.mode = _cast(None, mode)
        self.name = _cast(None, name)
        self.complex = _cast(None, complex)
        self.commandline = _cast(None, commandline)
        self.optional = _cast(None, optional)
        self.type_ = _cast(None, type_)
        self.description = description
        self.value = value
        self.units = units
        self.validate_Unit(self.units)
        self.range_ = range_
        self.enumerations = enumerations
        if kind is None:
            self.kind = []
        else:
            self.kind = kind
        self.action = action
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, simple)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if simple.subclass:
            return simple.subclass(*args_, **kwargs_)
        else:
            return simple(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    descriptionProp = property(get_description, set_description)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    valueProp = property(get_value, set_value)
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    unitsProp = property(get_units, set_units)
    def get_range(self): return self.range_
    def set_range(self, range_): self.range_ = range_
    rangeProp = property(get_range, set_range)
    def get_enumerations(self): return self.enumerations
    def set_enumerations(self, enumerations): self.enumerations = enumerations
    enumerationsProp = property(get_enumerations, set_enumerations)
    def get_kind(self): return self.kind
    def set_kind(self, kind): self.kind = kind
    def add_kind(self, value): self.kind.append(value)
    def insert_kind_at(self, index, value): self.kind.insert(index, value)
    def replace_kind_at(self, index, value): self.kind[index] = value
    kindProp = property(get_kind, set_kind)
    def get_action(self): return self.action
    def set_action(self, action): self.action = action
    actionProp = property(get_action, set_action)
    def get_id(self): return self.id_
    def set_id(self, id_): self.id_ = id_
    idProp = property(get_id, set_id)
    def get_mode(self): return self.mode
    def set_mode(self, mode): self.mode = mode
    modeProp = property(get_mode, set_mode)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def get_complex(self): return self.complex
    def set_complex(self, complex): self.complex = complex
    complexProp = property(get_complex, set_complex)
    def get_commandline(self): return self.commandline
    def set_commandline(self, commandline): self.commandline = commandline
    commandlineProp = property(get_commandline, set_commandline)
    def get_optional(self): return self.optional
    def set_optional(self, optional): self.optional = optional
    optionalProp = property(get_optional, set_optional)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    typeProp = property(get_type, set_type)
    def validate_Unit(self, value):
        # Validate type Unit, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_AccessType(self, value):
        # Validate type AccessType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['writeonly', 'readonly', 'readwrite']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AccessType' % {"value" : value.encode("utf-8")} )
    def validate_IsComplex(self, value):
        # Validate type IsComplex, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['false', 'true']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on IsComplex' % {"value" : value.encode("utf-8")} )
    def validate_IsCommandLine(self, value):
        # Validate type IsCommandLine, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['false', 'true']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on IsCommandLine' % {"value" : value.encode("utf-8")} )
    def validate_IsOptional(self, value):
        # Validate type IsOptional, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['false', 'true']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on IsOptional' % {"value" : value.encode("utf-8")} )
    def validate_PropertyValueType(self, value):
        # Validate type PropertyValueType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['string', 'boolean', 'ulong', 'objref', 'short', 'float', 'octet', 'char', 'ushort', 'double', 'long', 'longlong', 'ulonglong', 'utctime']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PropertyValueType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.description is not None or
            self.value is not None or
            self.units is not None or
            self.range_ is not None or
            self.enumerations is not None or
            self.kind or
            self.action is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='simple', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('simple')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='simple')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='simple', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='simple'):
        if self.id_ is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id_), input_name='id')), ))
        if self.mode != "readwrite" and 'mode' not in already_processed:
            already_processed.add('mode')
            outfile.write(' mode=%s' % (quote_attrib(self.mode), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.complex != "false" and 'complex' not in already_processed:
            already_processed.add('complex')
            outfile.write(' complex=%s' % (quote_attrib(self.complex), ))
        if self.commandline != "false" and 'commandline' not in already_processed:
            already_processed.add('commandline')
            outfile.write(' commandline=%s' % (quote_attrib(self.commandline), ))
        if self.optional != "false" and 'optional' not in already_processed:
            already_processed.add('optional')
            outfile.write(' optional=%s' % (quote_attrib(self.optional), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
    def exportChildren(self, outfile, level, namespace_='', name_='simple', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<description>%s</description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), eol_))
        if self.value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<value>%s</value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.value), input_name='value')), eol_))
        if self.units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<units>%s</units>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.units), input_name='units')), eol_))
        if self.range_ is not None:
            self.range_.export(outfile, level, namespace_, name_='range', pretty_print=pretty_print)
        if self.enumerations is not None:
            self.enumerations.export(outfile, level, namespace_, name_='enumerations', pretty_print=pretty_print)
        for kind_ in self.kind:
            kind_.export(outfile, level, namespace_, name_='kind', pretty_print=pretty_print)
        if self.action is not None:
            self.action.export(outfile, level, namespace_, name_='action', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id_ = value
        value = find_attr_value_('mode', node)
        if value is not None and 'mode' not in already_processed:
            already_processed.add('mode')
            self.mode = value
            self.validate_AccessType(self.mode)    # validate type AccessType
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('complex', node)
        if value is not None and 'complex' not in already_processed:
            already_processed.add('complex')
            self.complex = value
            self.validate_IsComplex(self.complex)    # validate type IsComplex
        value = find_attr_value_('commandline', node)
        if value is not None and 'commandline' not in already_processed:
            already_processed.add('commandline')
            self.commandline = value
            self.validate_IsCommandLine(self.commandline)    # validate type IsCommandLine
        value = find_attr_value_('optional', node)
        if value is not None and 'optional' not in already_processed:
            already_processed.add('optional')
            self.optional = value
            self.validate_IsOptional(self.optional)    # validate type IsOptional
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
            self.validate_PropertyValueType(self.type_)    # validate type PropertyValueType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
        elif nodeName_ == 'units':
            units_ = child_.text
            units_ = self.gds_validate_string(units_, node, 'units')
            self.units = units_
            # validate type Unit
            self.validate_Unit(self.units)
        elif nodeName_ == 'range':
            obj_ = range_.factory()
            obj_.build(child_)
            self.range_ = obj_
            obj_.original_tagname_ = 'range'
        elif nodeName_ == 'enumerations':
            obj_ = enumerations.factory()
            obj_.build(child_)
            self.enumerations = obj_
            obj_.original_tagname_ = 'enumerations'
        elif nodeName_ == 'kind':
            obj_ = kind.factory()
            obj_.build(child_)
            self.kind.append(obj_)
            obj_.original_tagname_ = 'kind'
        elif nodeName_ == 'action':
            obj_ = action.factory()
            obj_.build(child_)
            self.action = obj_
            obj_.original_tagname_ = 'action'
# end class simple


class simpleRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, value=None):
        self.original_tagname_ = None
        self.refid = _cast(None, refid)
        self.value = _cast(None, value)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, simpleRef)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if simpleRef.subclass:
            return simpleRef.subclass(*args_, **kwargs_)
        else:
            return simpleRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    refidProp = property(get_refid, set_refid)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    valueProp = property(get_value, set_value)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='simpleRef', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('simpleRef')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='simpleRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='simpleRef', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='simpleRef'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='simpleRef', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class simpleRef


class simpleSequenceRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, values=None):
        self.original_tagname_ = None
        self.refid = _cast(None, refid)
        self.values = values
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, simpleSequenceRef)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if simpleSequenceRef.subclass:
            return simpleSequenceRef.subclass(*args_, **kwargs_)
        else:
            return simpleSequenceRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_values(self): return self.values
    def set_values(self, values): self.values = values
    valuesProp = property(get_values, set_values)
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    refidProp = property(get_refid, set_refid)
    def hasContent_(self):
        if (
            self.values is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='simpleSequenceRef', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('simpleSequenceRef')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='simpleSequenceRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='simpleSequenceRef', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='simpleSequenceRef'):
        if self.refid is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            outfile.write(' refid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refid), input_name='refid')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='simpleSequenceRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.values is not None:
            self.values.export(outfile, level, namespace_, name_='values', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refid', node)
        if value is not None and 'refid' not in already_processed:
            already_processed.add('refid')
            self.refid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'values':
            obj_ = values.factory()
            obj_.build(child_)
            self.values = obj_
            obj_.original_tagname_ = 'values'
# end class simpleSequenceRef


class simpleSequence(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id_=None, mode='readwrite', name=None, type_=None, complex='false', optional='false', description=None, values=None, units=None, range_=None, kind=None, action=None):
        self.original_tagname_ = None
        self.id_ = _cast(None, id_)
        self.mode = _cast(None, mode)
        self.name = _cast(None, name)
        self.type_ = _cast(None, type_)
        self.complex = _cast(None, complex)
        self.optional = _cast(None, optional)
        self.description = description
        self.values = values
        self.units = units
        self.validate_Unit(self.units)
        self.range_ = range_
        if kind is None:
            self.kind = []
        else:
            self.kind = kind
        self.action = action
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, simpleSequence)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if simpleSequence.subclass:
            return simpleSequence.subclass(*args_, **kwargs_)
        else:
            return simpleSequence(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    descriptionProp = property(get_description, set_description)
    def get_values(self): return self.values
    def set_values(self, values): self.values = values
    valuesProp = property(get_values, set_values)
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    unitsProp = property(get_units, set_units)
    def get_range(self): return self.range_
    def set_range(self, range_): self.range_ = range_
    rangeProp = property(get_range, set_range)
    def get_kind(self): return self.kind
    def set_kind(self, kind): self.kind = kind
    def add_kind(self, value): self.kind.append(value)
    def insert_kind_at(self, index, value): self.kind.insert(index, value)
    def replace_kind_at(self, index, value): self.kind[index] = value
    kindProp = property(get_kind, set_kind)
    def get_action(self): return self.action
    def set_action(self, action): self.action = action
    actionProp = property(get_action, set_action)
    def get_id(self): return self.id_
    def set_id(self, id_): self.id_ = id_
    idProp = property(get_id, set_id)
    def get_mode(self): return self.mode
    def set_mode(self, mode): self.mode = mode
    modeProp = property(get_mode, set_mode)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    typeProp = property(get_type, set_type)
    def get_complex(self): return self.complex
    def set_complex(self, complex): self.complex = complex
    complexProp = property(get_complex, set_complex)
    def get_optional(self): return self.optional
    def set_optional(self, optional): self.optional = optional
    optionalProp = property(get_optional, set_optional)
    def validate_Unit(self, value):
        # Validate type Unit, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_AccessType(self, value):
        # Validate type AccessType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['writeonly', 'readonly', 'readwrite']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AccessType' % {"value" : value.encode("utf-8")} )
    def validate_PropertyValueType(self, value):
        # Validate type PropertyValueType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['string', 'boolean', 'ulong', 'objref', 'short', 'float', 'octet', 'char', 'ushort', 'double', 'long', 'longlong', 'ulonglong', 'utctime']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on PropertyValueType' % {"value" : value.encode("utf-8")} )
    def validate_IsComplex(self, value):
        # Validate type IsComplex, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['false', 'true']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on IsComplex' % {"value" : value.encode("utf-8")} )
    def validate_IsOptional(self, value):
        # Validate type IsOptional, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['false', 'true']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on IsOptional' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.description is not None or
            self.values is not None or
            self.units is not None or
            self.range_ is not None or
            self.kind or
            self.action is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='simpleSequence', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('simpleSequence')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='simpleSequence')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='simpleSequence', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='simpleSequence'):
        if self.id_ is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id_), input_name='id')), ))
        if self.mode != "readwrite" and 'mode' not in already_processed:
            already_processed.add('mode')
            outfile.write(' mode=%s' % (quote_attrib(self.mode), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.complex != "false" and 'complex' not in already_processed:
            already_processed.add('complex')
            outfile.write(' complex=%s' % (quote_attrib(self.complex), ))
        if self.optional != "false" and 'optional' not in already_processed:
            already_processed.add('optional')
            outfile.write(' optional=%s' % (quote_attrib(self.optional), ))
    def exportChildren(self, outfile, level, namespace_='', name_='simpleSequence', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<description>%s</description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), eol_))
        if self.values is not None:
            self.values.export(outfile, level, namespace_, name_='values', pretty_print=pretty_print)
        if self.units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<units>%s</units>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.units), input_name='units')), eol_))
        if self.range_ is not None:
            self.range_.export(outfile, level, namespace_, name_='range', pretty_print=pretty_print)
        for kind_ in self.kind:
            kind_.export(outfile, level, namespace_, name_='kind', pretty_print=pretty_print)
        if self.action is not None:
            self.action.export(outfile, level, namespace_, name_='action', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id_ = value
        value = find_attr_value_('mode', node)
        if value is not None and 'mode' not in already_processed:
            already_processed.add('mode')
            self.mode = value
            self.validate_AccessType(self.mode)    # validate type AccessType
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
            self.validate_PropertyValueType(self.type_)    # validate type PropertyValueType
        value = find_attr_value_('complex', node)
        if value is not None and 'complex' not in already_processed:
            already_processed.add('complex')
            self.complex = value
            self.validate_IsComplex(self.complex)    # validate type IsComplex
        value = find_attr_value_('optional', node)
        if value is not None and 'optional' not in already_processed:
            already_processed.add('optional')
            self.optional = value
            self.validate_IsOptional(self.optional)    # validate type IsOptional
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
        elif nodeName_ == 'values':
            obj_ = values.factory()
            obj_.build(child_)
            self.values = obj_
            obj_.original_tagname_ = 'values'
        elif nodeName_ == 'units':
            units_ = child_.text
            units_ = self.gds_validate_string(units_, node, 'units')
            self.units = units_
            # validate type Unit
            self.validate_Unit(self.units)
        elif nodeName_ == 'range':
            obj_ = range_.factory()
            obj_.build(child_)
            self.range_ = obj_
            obj_.original_tagname_ = 'range'
        elif nodeName_ == 'kind':
            obj_ = kind.factory()
            obj_.build(child_)
            self.kind.append(obj_)
            obj_.original_tagname_ = 'kind'
        elif nodeName_ == 'action':
            obj_ = action.factory()
            obj_.build(child_)
            self.action = obj_
            obj_.original_tagname_ = 'action'
# end class simpleSequence


class struct(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id_=None, mode='readwrite', name=None, description=None, simple=None, simplesequence=None, configurationkind=None):
        self.original_tagname_ = None
        self.id_ = _cast(None, id_)
        self.mode = _cast(None, mode)
        self.name = _cast(None, name)
        self.description = description
        if simple is None:
            self.simple = []
        else:
            self.simple = simple
        if simplesequence is None:
            self.simplesequence = []
        else:
            self.simplesequence = simplesequence
        if configurationkind is None:
            self.configurationkind = []
        else:
            self.configurationkind = configurationkind
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, struct)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if struct.subclass:
            return struct.subclass(*args_, **kwargs_)
        else:
            return struct(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    descriptionProp = property(get_description, set_description)
    def get_simple(self): return self.simple
    def set_simple(self, simple): self.simple = simple
    def add_simple(self, value): self.simple.append(value)
    def insert_simple_at(self, index, value): self.simple.insert(index, value)
    def replace_simple_at(self, index, value): self.simple[index] = value
    simpleProp = property(get_simple, set_simple)
    def get_simplesequence(self): return self.simplesequence
    def set_simplesequence(self, simplesequence): self.simplesequence = simplesequence
    def add_simplesequence(self, value): self.simplesequence.append(value)
    def insert_simplesequence_at(self, index, value): self.simplesequence.insert(index, value)
    def replace_simplesequence_at(self, index, value): self.simplesequence[index] = value
    simplesequenceProp = property(get_simplesequence, set_simplesequence)
    def get_configurationkind(self): return self.configurationkind
    def set_configurationkind(self, configurationkind): self.configurationkind = configurationkind
    def add_configurationkind(self, value): self.configurationkind.append(value)
    def insert_configurationkind_at(self, index, value): self.configurationkind.insert(index, value)
    def replace_configurationkind_at(self, index, value): self.configurationkind[index] = value
    configurationkindProp = property(get_configurationkind, set_configurationkind)
    def get_id(self): return self.id_
    def set_id(self, id_): self.id_ = id_
    idProp = property(get_id, set_id)
    def get_mode(self): return self.mode
    def set_mode(self, mode): self.mode = mode
    modeProp = property(get_mode, set_mode)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def validate_AccessType(self, value):
        # Validate type AccessType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['writeonly', 'readonly', 'readwrite']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AccessType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.description is not None or
            self.simple or
            self.simplesequence or
            self.configurationkind
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='struct', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('struct')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='struct')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='struct', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='struct'):
        if self.id_ is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id_), input_name='id')), ))
        if self.mode != "readwrite" and 'mode' not in already_processed:
            already_processed.add('mode')
            outfile.write(' mode=%s' % (quote_attrib(self.mode), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='struct', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<description>%s</description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), eol_))
        for simple_ in self.simple:
            simple_.export(outfile, level, namespace_, name_='simple', pretty_print=pretty_print)
        for simplesequence_ in self.simplesequence:
            simplesequence_.export(outfile, level, namespace_, name_='simplesequence', pretty_print=pretty_print)
        for configurationkind_ in self.configurationkind:
            configurationkind_.export(outfile, level, namespace_, name_='configurationkind', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id_ = value
        value = find_attr_value_('mode', node)
        if value is not None and 'mode' not in already_processed:
            already_processed.add('mode')
            self.mode = value
            self.validate_AccessType(self.mode)    # validate type AccessType
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
        elif nodeName_ == 'simple':
            obj_ = simple.factory()
            obj_.build(child_)
            self.simple.append(obj_)
            obj_.original_tagname_ = 'simple'
        elif nodeName_ == 'simplesequence':
            obj_ = simpleSequence.factory()
            obj_.build(child_)
            self.simplesequence.append(obj_)
            obj_.original_tagname_ = 'simplesequence'
        elif nodeName_ == 'configurationkind':
            obj_ = configurationKind.factory()
            obj_.build(child_)
            self.configurationkind.append(obj_)
            obj_.original_tagname_ = 'configurationkind'
# end class struct


class structSequence(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id_=None, mode='readwrite', name=None, description=None, struct=None, structvalue=None, configurationkind=None):
        self.original_tagname_ = None
        self.id_ = _cast(None, id_)
        self.mode = _cast(None, mode)
        self.name = _cast(None, name)
        self.description = description
        self.struct = struct
        if structvalue is None:
            self.structvalue = []
        else:
            self.structvalue = structvalue
        if configurationkind is None:
            self.configurationkind = []
        else:
            self.configurationkind = configurationkind
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, structSequence)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if structSequence.subclass:
            return structSequence.subclass(*args_, **kwargs_)
        else:
            return structSequence(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    descriptionProp = property(get_description, set_description)
    def get_struct(self): return self.struct
    def set_struct(self, struct): self.struct = struct
    structProp = property(get_struct, set_struct)
    def get_structvalue(self): return self.structvalue
    def set_structvalue(self, structvalue): self.structvalue = structvalue
    def add_structvalue(self, value): self.structvalue.append(value)
    def insert_structvalue_at(self, index, value): self.structvalue.insert(index, value)
    def replace_structvalue_at(self, index, value): self.structvalue[index] = value
    structvalueProp = property(get_structvalue, set_structvalue)
    def get_configurationkind(self): return self.configurationkind
    def set_configurationkind(self, configurationkind): self.configurationkind = configurationkind
    def add_configurationkind(self, value): self.configurationkind.append(value)
    def insert_configurationkind_at(self, index, value): self.configurationkind.insert(index, value)
    def replace_configurationkind_at(self, index, value): self.configurationkind[index] = value
    configurationkindProp = property(get_configurationkind, set_configurationkind)
    def get_id(self): return self.id_
    def set_id(self, id_): self.id_ = id_
    idProp = property(get_id, set_id)
    def get_mode(self): return self.mode
    def set_mode(self, mode): self.mode = mode
    modeProp = property(get_mode, set_mode)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def validate_AccessType(self, value):
        # Validate type AccessType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['writeonly', 'readonly', 'readwrite']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on AccessType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.description is not None or
            self.struct is not None or
            self.structvalue or
            self.configurationkind
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='structSequence', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('structSequence')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='structSequence')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='structSequence', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='structSequence'):
        if self.id_ is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id_), input_name='id')), ))
        if self.mode != "readwrite" and 'mode' not in already_processed:
            already_processed.add('mode')
            outfile.write(' mode=%s' % (quote_attrib(self.mode), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='structSequence', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<description>%s</description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), eol_))
        if self.struct is not None:
            self.struct.export(outfile, level, namespace_, name_='struct', pretty_print=pretty_print)
        for structvalue_ in self.structvalue:
            structvalue_.export(outfile, level, namespace_, name_='structvalue', pretty_print=pretty_print)
        for configurationkind_ in self.configurationkind:
            configurationkind_.export(outfile, level, namespace_, name_='configurationkind', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id_ = value
        value = find_attr_value_('mode', node)
        if value is not None and 'mode' not in already_processed:
            already_processed.add('mode')
            self.mode = value
            self.validate_AccessType(self.mode)    # validate type AccessType
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
        elif nodeName_ == 'struct':
            obj_ = struct.factory()
            obj_.build(child_)
            self.struct = obj_
            obj_.original_tagname_ = 'struct'
        elif nodeName_ == 'structvalue':
            obj_ = structValue.factory()
            obj_.build(child_)
            self.structvalue.append(obj_)
            obj_.original_tagname_ = 'structvalue'
        elif nodeName_ == 'configurationkind':
            obj_ = configurationKind.factory()
            obj_.build(child_)
            self.configurationkind.append(obj_)
            obj_.original_tagname_ = 'configurationkind'
# end class structSequence


class structValue(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, simpleref=None, simplesequenceref=None):
        self.original_tagname_ = None
        if simpleref is None:
            self.simpleref = []
        else:
            self.simpleref = simpleref
        if simplesequenceref is None:
            self.simplesequenceref = []
        else:
            self.simplesequenceref = simplesequenceref
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, structValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if structValue.subclass:
            return structValue.subclass(*args_, **kwargs_)
        else:
            return structValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_simpleref(self): return self.simpleref
    def set_simpleref(self, simpleref): self.simpleref = simpleref
    def add_simpleref(self, value): self.simpleref.append(value)
    def insert_simpleref_at(self, index, value): self.simpleref.insert(index, value)
    def replace_simpleref_at(self, index, value): self.simpleref[index] = value
    simplerefProp = property(get_simpleref, set_simpleref)
    def get_simplesequenceref(self): return self.simplesequenceref
    def set_simplesequenceref(self, simplesequenceref): self.simplesequenceref = simplesequenceref
    def add_simplesequenceref(self, value): self.simplesequenceref.append(value)
    def insert_simplesequenceref_at(self, index, value): self.simplesequenceref.insert(index, value)
    def replace_simplesequenceref_at(self, index, value): self.simplesequenceref[index] = value
    simplesequencerefProp = property(get_simplesequenceref, set_simplesequenceref)
    def hasContent_(self):
        if (
            self.simpleref or
            self.simplesequenceref
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='structValue', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('structValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='structValue')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='structValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='structValue'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='structValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for simpleref_ in self.simpleref:
            simpleref_.export(outfile, level, namespace_, name_='simpleref', pretty_print=pretty_print)
        for simplesequenceref_ in self.simplesequenceref:
            simplesequenceref_.export(outfile, level, namespace_, name_='simplesequenceref', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'simpleref':
            obj_ = simpleRef.factory()
            obj_.build(child_)
            self.simpleref.append(obj_)
            obj_.original_tagname_ = 'simpleref'
        elif nodeName_ == 'simplesequenceref':
            obj_ = simpleSequenceRef.factory()
            obj_.build(child_)
            self.simplesequenceref.append(obj_)
            obj_.original_tagname_ = 'simplesequenceref'
# end class structValue


class test(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id_=None, description=None, inputvalue=None, resultvalue=None):
        self.original_tagname_ = None
        self.id_ = _cast(None, id_)
        self.description = description
        self.inputvalue = inputvalue
        self.resultvalue = resultvalue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, test)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if test.subclass:
            return test.subclass(*args_, **kwargs_)
        else:
            return test(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    descriptionProp = property(get_description, set_description)
    def get_inputvalue(self): return self.inputvalue
    def set_inputvalue(self, inputvalue): self.inputvalue = inputvalue
    inputvalueProp = property(get_inputvalue, set_inputvalue)
    def get_resultvalue(self): return self.resultvalue
    def set_resultvalue(self, resultvalue): self.resultvalue = resultvalue
    resultvalueProp = property(get_resultvalue, set_resultvalue)
    def get_id(self): return self.id_
    def set_id(self, id_): self.id_ = id_
    idProp = property(get_id, set_id)
    def hasContent_(self):
        if (
            self.description is not None or
            self.inputvalue is not None or
            self.resultvalue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='test', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('test')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='test')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='test', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='test'):
        if self.id_ is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id_), input_name='id')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='test', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<description>%s</description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), eol_))
        if self.inputvalue is not None:
            self.inputvalue.export(outfile, level, namespace_, name_='inputvalue', pretty_print=pretty_print)
        if self.resultvalue is not None:
            self.resultvalue.export(outfile, level, namespace_, name_='resultvalue', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
        elif nodeName_ == 'inputvalue':
            obj_ = inputValue.factory()
            obj_.build(child_)
            self.inputvalue = obj_
            obj_.original_tagname_ = 'inputvalue'
        elif nodeName_ == 'resultvalue':
            obj_ = resultValue.factory()
            obj_.build(child_)
            self.resultvalue = obj_
            obj_.original_tagname_ = 'resultvalue'
# end class test


class values(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None):
        self.original_tagname_ = None
        if value is None:
            self.value = []
        else:
            self.value = value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, values)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if values.subclass:
            return values.subclass(*args_, **kwargs_)
        else:
            return values(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def add_value(self, value): self.value.append(value)
    def insert_value_at(self, index, value): self.value.insert(index, value)
    def replace_value_at(self, index, value): self.value[index] = value
    valueProp = property(get_value, set_value)
    def hasContent_(self):
        if (
            self.value
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='values', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('values')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='values')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='values', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='values'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='values', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for value_ in self.value:
            showIndent(outfile, level, pretty_print)
            outfile.write('<value>%s</value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(value_), input_name='value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value.append(value_)
# end class values


GDSClassesMapping = {
    'properties': properties,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'properties'
        rootClass = properties
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_='',
##             pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'properties'
        rootClass = properties
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
##     if not silence:
##         content = etree_.tostring(
##             rootElement, pretty_print=True,
##             xml_declaration=True, encoding="utf-8")
##         sys.stdout.write(content)
##         sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'properties'
        rootClass = properties
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'properties'
        rootClass = properties
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('#from prf import *\n\n')
##         sys.stdout.write('import prf as model_\n\n')
##         sys.stdout.write('rootObj = model_.rootClass(\n')
##         rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
##         sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "action",
    "configurationKind",
    "enumeration",
    "enumerations",
    "inputValue",
    "kind",
    "properties",
    "range",
    "resultValue",
    "simple",
    "simpleRef",
    "simpleSequence",
    "simpleSequenceRef",
    "struct",
    "structSequence",
    "structValue",
    "test",
    "values"
]
