#!/usr/bin/env python
#
# This file is protected by Copyright. Please refer to the COPYRIGHT file 
# distributed with this source distribution.
# 
# This file is part of REDHAWK core.
# 
# REDHAWK core is free software: you can redistribute it and/or modify it under 
# the terms of the GNU Lesser General Public License as published by the Free 
# Software Foundation, either version 3 of the License, or (at your option) any 
# later version.
# 
# REDHAWK core is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
# 
# You should have received a copy of the GNU Lesser General Public License 
# along with this program.  If not, see http://www.gnu.org/licenses/.
#


from ossie.utils.sb import *
import sys

def usage():
    print "Usage:"
    print "    rh-launch filesrc location=<input filename> datatype=<data type> ! <component name> ! .....! filesink location=<output filename>"
    print "          Individual components are separated by !"
    print "          \"!\" indicates a connection between Uses (output) port of previous component and Provides (input) port of the component following it"
    print "          Input file source is specified by entering \"filesrc location=<input filename including path> datatype=<data type>"
    print "          Output file is specified by entering \"filesink location=<output filename including path>"

if '__main__':
    try:
        DEBUG = True 
        if len(sys.argv) == 1:
            usage()
        else:
            components = {}
            needInputFileLocation = False
            needInputFileDataType = False
            needOutputFileLocation = False
            inputFilename = None
            outputFilename = None
            componentNumber = 0
            for arg in sys.argv[1:]:
                components[componentNumber] = {}
                # If filesrc, launch InputFile
                if arg.find("filesrc") != -1:
                    needInputFileLocation = True
                elif arg.find("filesink") != -1:
                    components[componentNumber]["OutputFile"] = {}
                    needOutputFileLocation = True
                elif arg.find("location") != -1:
                    if needInputFileLocation == True:
                        inputFilename = arg.split("=")[1].strip() 
                        needInputFileLocation = False
                        needInputFileDataType = True
                    elif needOutputFileLocation == True:
                        components[componentNumber]["OutputFile"] = {}
                        outputFilename = arg.split("=")[1].strip()
                        components[componentNumber]["OutputFile"]["Filename"] = outputFilename
                        components[componentNumber]["OutputFile"]["Object"] = OutputFile(outputFilename)
                        needOutputFileLocation = False 
                        componentNumber = componentNumber + 1 
                elif arg.find("datatype") != -1:
                    if needInputFileDataType == True:
                        components[componentNumber]["InputFile"] = {}
                        components[componentNumber]["InputFile"]["Filename"] = inputFilename
                        components[componentNumber]["InputFile"]["Object"] = InputFile(str(inputFilename), "short")
                        components[componentNumber]["InputFile"]["Object"].api(destfile=sys.stdout)
                        componentNumber = componentNumber + 1 
                        needInputFileDataType = False
                elif arg.find("!") != -1:
                    pass
                else:
                    # Assume any other arguments are components to launch
                    components[componentNumber][arg] = {}
                    components[componentNumber][arg]["Object"] = Component(arg) 
                    componentNumber = componentNumber + 1 
        # Call start on all components
        start()

    except Exception, e:
        print "rh-launch Exception " + str(e)
        usage()

