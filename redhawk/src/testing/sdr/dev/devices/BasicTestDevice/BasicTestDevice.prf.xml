<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is protected by Copyright. Please refer to the COPYRIGHT file 
distributed with this source distribution.

This file is part of REDHAWK core.

REDHAWK core is free software: you can redistribute it and/or modify it under 
the terms of the GNU Lesser General Public License as published by the Free 
Software Foundation, either version 3 of the License, or (at your option) any 
later version.

REDHAWK core is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR 
A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more 
details.

You should have received a copy of the GNU Lesser General Public License along 
with this program.  If not, see http://www.gnu.org/licenses/.
-->

<!DOCTYPE properties PUBLIC '-//JTRS//DTD SCA V2.2.2 PRF//EN' 'properties.dtd'>
<properties>
    <simple id="DCE:6b298d70-6735-43f2-944d-06f754cd4eb9" name="no_default_prop" mode="readwrite" type="string">
        <description>A configure property with no default value.</description>
        <kind kindtype="configure"/>
    </simple>
    <simple id="hex_prop" name="hex_prop" mode="readwrite" type="short">
        <description>An integer property with a hexadecimal value</description>
        <value>0x02</value>
        <kind kindtype="configure"/>
    </simple>
    <simplesequence id="hex_props" name="hex_props" mode="readwrite" type="short">
        <description>An integer property with a hexadecimal value</description>
        <values>
            <value>0x02</value>
            <value>0x03</value>
        </values>
        <kind kindtype="configure"/>
    </simplesequence>
    <simple id="DCE:456310b2-7d2f-40f5-bfef-9fdf4f3560ea" name="default_prop" mode="readwrite" type="string">
        <description>A configure property with a default value.</description>
        <value>default</value>
        <kind kindtype="configure"/>
    </simple>
    <simple id="modified_default" name="modified_default" mode="readwrite" type="string">
        <description>A configure property with a default value in the xml file that is different from the hard-coded one</description>
        <value>modified_default_value</value>
        <kind kindtype="configure"/>
    </simple>
    <!-- Provide a processor_name and os_name matching property -->
    <simple id="DCE:4a23ad60-0b25-4121-a630-68803a498f75"
            name="os_name"
            mode="readonly"
            type="string">
        <description>
            SCA required property describing the Operating System
        </description>
        <value>Linux</value>
        <kind kindtype="allocation"/>
        <action type="eq"/>
    </simple>
    <simple id="writeonly_configure"
            name="writeonly_configure"
            mode="writeonly"
            type="float">
        <description>
            test to make sure that writeonly properties cannot be queried
        </description>
        <kind kindtype="configure"/>
    </simple>
    <simple id="writeonly_allocation"
            name="writeonly_allocation"
            mode="writeonly"
            type="float">
        <description>
            test to make sure that writeonly properties cannot be queried
        </description>
        <kind kindtype="allocation"/>
        <action type="external"/>
    </simple>
    <!-- Provide a variety of matching allocation properties. -->
    <simple id="DCE:7f36cdfb-f828-4e4f-b84f-446e17f1a85b"
            name="DeviceKind"
            mode="readonly"
            type="string"
            >
        <description>
            The type of this device...see D.4.1.17
        </description>
        <value>BasicTestDevice</value>
        <kind kindtype="allocation"/>
        <action type="eq"/>
    </simple>
    <simple id="DCE:64303822-4c67-4c04-9a5c-bf670f27cf39"
            name="RunsAs"
            mode="readonly"
            type="string"
            >
        <value>root</value>
        <kind kindtype="allocation"/>
        <action type="ne"/>
    </simple>
    <simple id="DCE:021f10cf-7a05-46ec-a507-04b513b84bd4"
            name="HasXMIDAS"
            mode="readonly"
            type="boolean"
            >
        <value>true</value>
        <kind kindtype="allocation"/>
        <action type="eq"/>
    </simple>
    <simple id="DCE:ac73446e-f935-40b6-8b8d-4d9adb6b403f"
            name="ProvidedCpuCores"
            mode="readonly"
            type="short"
            >
        <value>8</value>
        <kind kindtype="allocation"/>
        <action type="ge"/>
    </simple>
    <simple id="DCE:dd339b67-b387-4018-94d2-9a72955d85b9"
            name="CoresClockRateGHz"
            mode="readonly"
            type="float"
            >
        <value>3.0</value>
        <kind kindtype="allocation"/>
        <action type="le"/>
    </simple>
    <!-- Provide two external capacities that can be allocated -->
    <simple id="DCE:8dcef419-b440-4bcf-b893-cab79b6024fb"
            name="memCapacity"
            mode="readonly"
            type="long">
        <description>
            Amount of RAM in the GPP not allocated to an application
        </description>
	<units>bytes</units>
        <kind kindtype="allocation"/>
    </simple>
    <simple id="DCE:4f9a57fc-8fb3-47f6-b779-3c2692f52cf9"
            name="nicCapacity"
            mode="readonly"
            type="float">
        <description>
            Amount of NIC capacity that is allocated
        </description>
	<units>percent</units>
        <kind kindtype="allocation"/>
    </simple>
    <simple id="DCE:5636c210-0346-4df7-a5a3-8fd34c5540a8"
            name="BogoMipsCapacity"
            mode="readonly"
            type="long">
        <description>
            Amount of BogoMips provided by the machine.
        </description>
	<units>bogomips</units>
        <kind kindtype="allocation"/>
    </simple>
    <simple id="DCE:0cfccc59-7853-4b19-9110-29dccc443374"
            name="fakeCapacity"
            mode="readonly"
            type="short">
        <description>
	    A fake capacity used for testing.
        </description>
	<units>unknown</units>
        <kind kindtype="allocation"/>
        <action/>
    </simple>
    <!-- execparams -->
    <simple id="DCE:c03e148f-e9f9-4d70-aa00-6e23d33fa648"
            name="SomeConfigFileLocation"
            mode="readwrite"
            type="string">
        <description>
            Some configuration file location needs to be specified in the DCD.
        </description>
        <value>notyourfile</value>
        <kind kindtype="execparam"/>
    </simple>
    <simple id="DCE:dc4289a8-bb98-435b-b914-305ffaa7594f"
            name="ImplementationSpecificProperty"
            mode="readwrite"
            type="string">
        <description>
            This property is implementation specific.
        </description>
        <value>DefaultValueNoGood</value>
        <kind kindtype="execparam"/>
    </simple>
    <simple id="DCE:6f5881b3-433e-434b-8204-d39c89ff4be2"
            name="ReadOnlyProperty"
            mode="readonly"
            type="string">
        <description>
            This property is implementation specific.
        </description>
        <value>DefaultValueGood</value>
        <kind kindtype="execparam"/>
    </simple>
    <simple id="DCE:716ea1c4-059a-4b18-8b66-74804bd8d435"
            name="ImplementationSpecificProperty2"
            mode="readwrite"
            type="string">
        <description>
            This property is also implementation specific.
        </description>
        <kind kindtype="execparam"/>
    </simple>
    <simple id="DCE:f6fb9770-cfd9-4e14-a337-2234f7f3317b"
            name="ImplementationSpecificAllocationProp"
            mode="readwrite"
            type="string">
        <description>
            This property is also implementation specific.
        </description>
        <kind kindtype="allocation"/>
        <action type="eq"/>
    </simple>
    <simple id="check_STACK_SIZE"
            name="check STACK SIZE"
            mode="readwrite"
            type="ulong">
        <description>
            This property returns the value for the last stack size passed as an option for execute
        </description>
        <kind kindtype="configure"/>
    </simple>
    <simple id="check_PRIORITY"
            name="check PRIORITY"
            mode="readwrite"
            type="ulong">
        <description>
            This property returns the value for the last priority passed as an option for execute
        </description>
        <kind kindtype="configure"/>
    </simple>
    <simple id="DCE:85d133fd-1658-4e4d-b3ff-1443cd44c0e2" mode="readonly" name="execparams" type="string">
        <description>The execparms passed to the component.</description> 
        <kind kindtype="configure"/>
    </simple>
    <struct id="DCE:ffe634c9-096d-425b-86cc-df1cce50612f" mode="readwrite" name="struct_test">
        <description>Test that structs are supported</description> 
	<simple id="item1" mode="readwrite" type="string">
	    <value>value1</value>
	</simple>
	<simple id="item2" mode="readwrite" type="long">
	    <value>100</value>
	</simple>
	<simple id="item3" mode="readwrite" type="double">
	    <value>3.14156</value>
	</simple>
        <configurationkind kindtype="configure"/>
    </struct>
    <struct id="DCE:001fad60-b4b3-4ed2-94cb-40e1d956bf4f" mode="readonly" name="allocStruct">
        <description>Test that structs are supported</description> 
        <simple id="long_capacity" type="long">
            <value>100</value>
        </simple>
        <simple id="float_capacity" type="float">
            <value>1.0</value>
        </simple>
        <simplesequence id="struct_simple_seq" type="short">
            <values>
                <value>50</value>
                <value>500</value>
            </values>
        </simplesequence>
        <configurationkind kindtype="configure"/>
        <configurationkind kindtype="allocation"/>
    </struct>
    <struct id="DCE:a5a6ab83-d2a8-4350-ac4d-05b40ee93838" mode="readwrite" name="passwordStruct">
        <description>Test allocation with structures that have strings</description>
        <simple id="password" type="string">
            <value>abracadabra</value>
        </simple>
        <configurationkind kindtype="allocation"/>
    </struct>
    <structsequence id="DCE:e836f007-5821-4671-b05a-e0ff5147fe86" mode="readwrite" name="structseq_test">
        <description>Test that struct sequences are supported</description> 
        <struct id="">
	    <simple id="item1" mode="readwrite" type="string"/>
	    <simple id="item2" mode="readwrite" type="long"/>
	    <simple id="item3" mode="readwrite" type="double"/>
        </struct>
        <configurationkind kindtype="configure"/>
    </structsequence>
</properties>
