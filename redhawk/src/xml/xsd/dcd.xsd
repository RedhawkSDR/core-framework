<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
This file is protected by Copyright. Please refer to the COPYRIGHT file 
distributed with this source distribution.

This file is part of REDHAWK core.

REDHAWK core is free software: you can redistribute it and/or modify it under 
the terms of the GNU Lesser General Public License as published by the Free 
Software Foundation, either version 3 of the License, or (at your option) any 
later version.

REDHAWK core is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR 
A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more 
details.

You should have received a copy of the GNU Lesser General Public License along 
with this program.  If not, see http://www.gnu.org/licenses/.
-->

<!--W3C Schema generated by XMLSpy v2009 sp1 (http://www.altova.com)-->
<!--Please add namespace attributes, a targetNamespace attribute and import elements according to your requirements-->
<xs:schema targetNamespace="urn:mil:jpeojtrs:sca:dcd"
           xmlns="urn:mil:jpeojtrs:sca:dcd"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
	   xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
           elementFormDefault="unqualified"
	   ecore:nsPrefix=""
	   ecore:package="mil.jpeojtrs.sca.dcd">
	<xs:complexType name="deviceconfiguration" ecore:name="DeviceConfiguration">
        <xs:annotation>
        	<xs:documentation>The DCD is based on the SAD (e.g., componentfiles, partitioning, etc.) DTD. The intent of the DCD is to provide the means of describing the components that are initially started on the CF DeviceManager node, how to obtain the CF DomainManager object reference, connections of services to components (CF Devices, CF DeviceManager), and the characteristics (file system names, etc.) for a CF DeviceManager. 

The componentfiles and partitioning elements are optional; if not provided,
that means no components are started up on the node, except for a CF DeviceManager.

If the partitioning element is specified then a componentfiles element has to be specified also.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
			<xs:element ref="description" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The optional description element, of the deviceconfiguration element, may be used to provide
information about the device configuration.</xs:documentation></xs:annotation></xs:element>
			<xs:element ref="devicemanagersoftpkg" ecore:name="deviceManagerSoftPkg">
				<xs:annotation>
					<xs:documentation>The devicemanagersoftpkg element refers to the SPD for the CF DeviceManager that
corresponds to this DCD. The SPD file is referenced by a localfile element. The referenced file
can be used to describe the CF DeviceManager implementation and to specify the usesports for
the services (Log(s), etc.) used by the CF DeviceManager.</xs:documentation></xs:annotation></xs:element>
			<xs:element ref="componentfiles" minOccurs="0" ecore:name="componentFiles">
				<xs:annotation>
					<xs:documentation>The optional componentfiles element is used to reference deployment information for
components that are started up on the device. The componentfile element references a Software
Package Descriptor (SPD). The SPD, for example, can be used to describe logical Devices, a CF
DeviceManager, a CF DomainManager, a Naming Service, and CF FileSystems.</xs:documentation></xs:annotation></xs:element>
			<xs:element ref="partitioning" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The optional partitioning element consists of a set of componentplacement elements. A
component instantiation is captured inside a componentplacement element.</xs:documentation></xs:annotation></xs:element>
			<xs:element ref="connections" minOccurs="0"/>
			<xs:element ref="domainmanager" ecore:name="domainManager"/>
			<xs:element ref="filesystemnames" minOccurs="0" ecore:name="fileSystemNames"/>
		</xs:sequence>
		<xs:attribute name="id" use="required" type="xs:string">
			<xs:annotation>
				<xs:documentation>The deviceconfiguration element’s id attribute is a unique identifier within the domain for the
device configuration. This id attribute is a UUID value as specified in section D.2.1.</xs:documentation></xs:annotation></xs:attribute>
		<xs:attribute name="name" type="xs:string">
			<xs:annotation>
				<xs:documentation>The name attribute is the user-friendly name for the CF DeviceManager’s label attribute.</xs:documentation>
			</xs:annotation></xs:attribute>
	</xs:complexType>
	<xs:element name="deviceconfiguration" type="deviceconfiguration"/>
	<xs:element name="description" type="xs:string"/>
	<xs:complexType name="devicemanagersoftpkg" ecore:name="DeviceManagerSoftPkg">
		<xs:sequence>
			<xs:element ref="localfile" ecore:name="localFile"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="devicemanagersoftpkg" type="devicemanagersoftpkg"/>
	<xs:complexType name="componentfiles" ecore:name="ComponentFiles">
		<xs:sequence>
			<xs:element ref="componentfile" maxOccurs="unbounded" ecore:name="componentFile"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="componentfiles" type="componentfiles"/>
	<xs:complexType name="componentfile" ecore:name="ComponentFile">
		<xs:sequence>
			<xs:element ref="localfile" ecore:name="localFile"/>
		</xs:sequence>
		<xs:attribute name="id" use="required" type="xs:string"/>
		<xs:attribute name="type" type="xs:string"/>
	</xs:complexType>
	<xs:element name="componentfile" type="componentfile"/>
	<xs:complexType name="localfile" ecore:name="LocalFile">
		<xs:attribute name="name" use="required" type="xs:string"/>
	</xs:complexType>
	<xs:element name="localfile" type="localfile"/>
	<xs:complexType name="partitioning" >
		<xs:sequence>
			<xs:element ref="componentplacement" minOccurs="0" maxOccurs="unbounded" ecore:name="componentPlacement">
				<xs:annotation>
					<xs:documentation>The componentplacement element (see Figure D-34) is used to define a particular deployment of
a component.</xs:documentation></xs:annotation></xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="partitioning" type="partitioning"/>
	<xs:complexType name="componentplacement" ecore:name="ComponentPlacement">
		<xs:sequence>
			<xs:element ref="componentfileref" ecore:name="componentFileRef">
				<xs:annotation>
					<xs:documentation>The componentfileref element identifies the component to be deployed.</xs:documentation></xs:annotation></xs:element>
			<xs:element ref="deployondevice" minOccurs="0" ecore:name="deployDevice">
				<xs:annotation>
					<xs:documentation>The optional deployondevice element indicates the device on which the componentinstantiation
element is deployed.</xs:documentation></xs:annotation></xs:element>
			<xs:element ref="compositepartofdevice" minOccurs="0" ecore:name="compositePartOfDevice">
				<xs:annotation>
					<xs:documentation>The optional compositepartofdevice element indicates the device that the
componentinstantiation element is aggregated with to form an aggregate relationship.</xs:documentation>
				</xs:annotation></xs:element>
			<xs:element ref="devicepkgfile" minOccurs="0" ecore:name="devicePkgFile">
				<xs:annotation>
					<xs:documentation>When the
component is a logical Device, the devicepkgfile element indicates the hardware device
information for the logical Device.</xs:documentation></xs:annotation></xs:element>
			<xs:element ref="componentinstantiation" maxOccurs="unbounded" ecore:name="componentInstantiation">
				<xs:annotation>
					<xs:documentation>The componentinstantiation element identifies the actual component created and its id attribute is a
DCE UUID value with the format as specified in section D.2.1.

Multiple components of the same kind can be created within the same componentplacement element.</xs:documentation>
				</xs:annotation></xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="componentplacement" type="componentplacement"/>
	<xs:complexType name="componentfileref" ecore:name="ComponentFileRef">
        <xs:annotation>
        	<xs:documentation>The componentfileref element is used to reference a componentfile element within the
componentfiles element.</xs:documentation></xs:annotation>
        <xs:attribute name="refid" use="required" type="xs:string">
        	<xs:annotation>
        		<xs:documentation>The componentfileref element’s refid attribute corresponds to a
componentfile element’s id attribute.</xs:documentation></xs:annotation></xs:attribute>
	</xs:complexType>
	<xs:element name="componentfileref" type="componentfileref"/>
	<xs:complexType name="deployondevice" ecore:name="DeployOnDevice">
        <xs:annotation>
        	<xs:documentation>The deployondevice element is used to reference a componentinstantiation element on which this
componentinstantiation is deployed.</xs:documentation></xs:annotation>
        <xs:attribute name="refid" use="required" type="xs:string" ecore:name="refID"/>
	</xs:complexType>
	<xs:element name="deployondevice" type="deployondevice"/>
	<xs:complexType name="compositepartofdevice" ecore:name="CompositePartOfDevice">
        <xs:annotation>
        	<xs:documentation>The compositepartofdevice element is used when an aggregate relationship exists to reference the
componentinstantiation element that describes the whole Device for which this Device’s
componentinstantiation element describes a part of the aggregate Device.</xs:documentation></xs:annotation>
        <xs:attribute name="refid" use="required" type="xs:string" ecore:name="refID"/>
	</xs:complexType>
	<xs:element name="compositepartofdevice" type="compositepartofdevice"/>
	<xs:complexType name="devicepkgfile" ecore:name="DevicePkgFile">
        <xs:annotation>
        	<xs:documentation>The devicepkgfile element is used to refer to a device package file that contains the hardware
device definition.</xs:documentation></xs:annotation>
        <xs:sequence>
			<xs:element ref="localfile" ecore:name="localFile"/>
		</xs:sequence>
		<xs:attribute name="type" type="xs:string"/>
	</xs:complexType>
	<xs:element name="devicepkgfile" type="devicepkgfile"/>
	<xs:complexType name="componentinstantiation" ecore:name="ComponentInstantiation">
        <xs:annotation>
        	<xs:documentation>The componentinstantiation element (see Figure D-35) is intended to describe a particular
instantiation of a component relative to a componentplacement element</xs:documentation></xs:annotation>
        <xs:sequence>
	  <xs:element ref="usagename" minOccurs="0" ecore:name="usageName">
	    <xs:annotation>
	      <xs:documentation>The componentinstantiation contains
a usagename element that is intended for an applicable name for the component.

For a component service type (e.g,, Log), the
usagename element needs to be unique for each service type.</xs:documentation>
	    </xs:annotation>
          </xs:element>
	  <xs:element ref="componentproperties" minOccurs="0" ecore:name="componentProperties">
	    <xs:annotation>
	      <xs:documentation>The optional componentproperties element (see Figure D-36) is a list of property values that are used in
                configuring the component.</xs:documentation>
	    </xs:annotation>
          </xs:element>
	  <xs:element name="affinity" minOccurs="0" maxOccurs="1" type="affinity"/>
	  <xs:element name="loggingconfig" minOccurs="0" maxOccurs="1" type="loggingconfig"/>
	  <xs:element name="deployerrequires" minOccurs="0" type="deployerrequires"/>
	</xs:sequence>
	<xs:attribute name="id" use="required" type="xs:string">
	  <xs:annotation>
	    <xs:documentation>The componentinstantiation‘s id attribute is a DCE UUID that uniquely identifier the component.</xs:documentation>
	</xs:annotation>
        </xs:attribute>
        <xs:attribute name="startorder" use="optional" type="xs:string"/>
	</xs:complexType>

	<xs:element name="componentinstantiation" type="componentinstantiation"/>
	<xs:element name="usagename" type="xs:string"/>


	<xs:complexType name="loggingconfig" >
          <xs:simpleContent>
	    <xs:extension base="xs:string">
	    <xs:attribute name="level" use="optional" type="xs:string"/>
	    </xs:extension>
          </xs:simpleContent>
	</xs:complexType>

	<xs:complexType name="affinity">
	  <xs:choice maxOccurs="unbounded">
	    <xs:element ref="simpleref" ecore:name="simpleRef"/>
	    <xs:element ref="simplesequenceref" ecore:name="simpleSequenceRef"/>
	    <xs:element ref="structref" ecore:name="structRef"/>
	    <xs:element ref="structsequenceref" ecore:name="structSequenceRef"/>
	  </xs:choice>
	</xs:complexType>

	<xs:complexType name="deployerrequires">
	  <xs:sequence>
	    <xs:element name="requires" type="idvalue" ecore:name="idValue" maxOccurs="unbounded"/>
	  </xs:sequence>
	</xs:complexType>

	<xs:complexType name="idvalue" ecore:name="idValue">
		<xs:attribute name="id" use="required" type="xs:string"/>
		<xs:attribute name="value" use="required" type="xs:string"/>
	</xs:complexType>

	<xs:complexType name="componentproperties" ecore:name="ComponentProperties">
		<xs:choice maxOccurs="unbounded">
			<xs:element ref="simpleref" ecore:name="simpleRef"/>
			<xs:element ref="simplesequenceref" ecore:name="simpleSequenceRef"/>
			<xs:element ref="structref" ecore:name="structRef"/>
			<xs:element ref="structsequenceref" ecore:name="structSequenceRef"/>
		</xs:choice>
	</xs:complexType>

	<xs:element name="componentproperties" type="componentproperties" />
	<xs:complexType name="devicethatloadedthiscomponentref" ecore:name="DeviceThatLoadedThisComponentRef">
		<xs:attribute name="refid" use="required" type="xs:string"/>
	</xs:complexType>
	<xs:element name="devicethatloadedthiscomponentref" type="devicethatloadedthiscomponentref"/>
	<xs:complexType name="deviceusedbythiscomponentref" ecore:name="DeviceUsedByThisComponentRef">
		<xs:attribute name="refid" use="required" type="xs:string"/>
		<xs:attribute name="usesrefid" use="required" type="xs:string"/>
	</xs:complexType>
	<xs:element name="deviceusedbythiscomponentref" type="deviceusedbythiscomponentref"/>
	<xs:complexType name="simpleref" ecore:name="SimpleRef">
		<xs:attribute name="refid" use="required" type="xs:string"/>
		<xs:attribute name="value" use="required" type="xs:string"/>
	</xs:complexType>
	<xs:element name="simpleref" type="simpleref"/>
	<xs:complexType name="simplesequenceref" ecore:name="SimpleSequenceRef">
		<xs:sequence>
			<xs:element ref="values"/>
		</xs:sequence>
		<xs:attribute name="refid" use="required" type="xs:string" ecore:name="refID"/>
	</xs:complexType>
	<xs:element name="simplesequenceref" type="simplesequenceref"/>
	<xs:complexType name="structref" ecore:name="StructRef">
		<xs:sequence>
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="simpleref" ecore:name="simpleRef"/>
				<xs:element ref="simplesequenceref" ecore:name="simpleSequenceRef"/>
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="refid" use="required" type="xs:string" ecore:name="refID"/>
	</xs:complexType>
	<xs:element name="structref" type="structref"/>
	<xs:complexType name="structsequenceref" ecore:name="StructSequenceRef">
		<xs:sequence>
			<xs:element ref="structvalue" maxOccurs="unbounded" ecore:name="structValue"/>
		</xs:sequence>
		<xs:attribute name="refid" use="required" type="xs:string" ecore:name="refID"/>
	</xs:complexType>
	<xs:element name="structsequenceref" type="structsequenceref"/>
	<xs:complexType name="structvalue" ecore:name="StructValue">
		<xs:sequence>
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="simpleref" ecore:name="simpleRef"/>
				<xs:element ref="simplesequenceref" ecore:name="simpleSequenceRef"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="structvalue" type="structvalue"/>
	<xs:complexType name="values">
		<xs:sequence>
			<xs:element ref="value" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="values" type="values"/>
	<xs:element name="value" type="xs:string"/>
	<xs:complexType name="componentinstantiationref" ecore:name="ComponentInstantiationRef">
		<xs:attribute name="refid" use="required" type="xs:string" ecore:name="refID"/>
	</xs:complexType>
	<xs:element name="componentinstantiationref" type="componentinstantiationref"/>
	<xs:complexType name="domainmanager" ecore:name="DomainManager">
        <xs:annotation>
        	<xs:documentation>The domainmanager element (see Figure D-37) indicates how to obtain the CF DomainManager
object reference.</xs:documentation></xs:annotation>
        <xs:choice>
			<xs:element ref="namingservice" ecore:name="namingService"/>
			<xs:element ref="stringifiedobjectref" ecore:name="stringifiedObjectRef"/>
		</xs:choice>
	</xs:complexType>
	<xs:element name="domainmanager" type="domainmanager"/>
	<xs:complexType name="findby" ecore:name="FindBy">
		<xs:choice>
			<xs:element ref="namingservice" ecore:name="namingService"/>
			<xs:element ref="stringifiedobjectref" ecore:name="stringifiedObejctRef"/>
			<xs:element ref="domainfinder" ecore:name="domainFinder"/>
		</xs:choice>
	</xs:complexType>
	<xs:element name="findby" type="findby"/>
	<xs:complexType name="namingservice" ecore:name="NamingService"> 
		<xs:attribute name="name" use="required" type="xs:string"/>
	</xs:complexType>
	<xs:element name="namingservice" type="namingservice"/>
	<xs:element name="stringifiedobjectref" type="xs:string"/>
	<xs:complexType name="domainfinder" ecore:name="DomaingFinder">
		<xs:attribute name="type" use="required" type="xs:string"/>
		<xs:attribute name="name" type="xs:string"/>
	</xs:complexType>
	<xs:element name="domainfinder" type="domainfinder"/>
	<xs:complexType name="filesystemnames" ecore:name="FileSystemNames">
        <xs:annotation>
        	<xs:documentation>The optional filesystemnames element indicates the mounted file system names for CF
DeviceManager’s FileManager.</xs:documentation></xs:annotation>
        <xs:sequence>
			<xs:element ref="filesystemname" maxOccurs="unbounded" ecore:name="fileSystemName"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="filesystemnames" type="filesystemnames"/>
	<xs:complexType name="filesystemname" ecore:name="FileSystemName">
		<xs:attribute name="mountname" use="required" type="xs:string" ecore:name="mountName"/>
		<xs:attribute name="deviceid" use="required" type="xs:string" ecore:name="deviceID"/>
	</xs:complexType>
	<xs:element name="filesystemname" type="filesystemname"/>
	<xs:complexType name="connections">
        <xs:annotation>
        	<xs:documentation>The connections element in the DCD is the same as the connections element in the SAD in
section D.6.5. The connections element in the DCD is used to indicate the services (Log, etc…)
instances that are used by the CF DeviceManager and CF Device components in the DCD. The
CF DomainManager will parse the connections element and make the connections when the CF
DeviceManager registers with the CF DomainManager. To establish connections to a CF
DeviceManager, the DCD’s deviceconfiguration element’s id attribute value is used for the
SAD’s usesport element’s componentinstantiationref element’s refid attribute value.</xs:documentation></xs:annotation>
        <xs:sequence>
			<xs:element ref="connectinterface" minOccurs="0" maxOccurs="unbounded" ecore:name="connectInterface"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="connections" type="connections"/>
	<xs:complexType name="connectinterface" ecore:name="ConnectInterface">
		<xs:sequence>
			<xs:element ref="usesport" ecore:name="usesPort"/>
			<xs:choice>
				<xs:element ref="providesport" ecore:name="providesPort"/>
				<xs:element ref="componentsupportedinterface" ecore:name="componentSupportedInterface"/>
				<xs:element ref="findby" ecore:name="findBy"/>
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="id" type="xs:string"/>
	</xs:complexType>
	<xs:element name="connectinterface" type="connectinterface"/>
	<xs:complexType name="usesport" ecore:name="UsesPort">
		<xs:sequence>
			<xs:element ref="usesidentifier" ecore:name="usesIdentifier"/>
			<xs:choice>
				<xs:element ref="componentinstantiationref" ecore:name="componentInstantiationRef"/>
				<xs:element ref="devicethatloadedthiscomponentref" ecore:name="deviceThatLoadedThisComponentRef"/>
				<xs:element ref="deviceusedbythiscomponentref" ecore:name="deviceUsedByThisComponentRef"/>
				<xs:element ref="findby" ecore:name="findBy"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="usesport" type="usesport"/>
	<xs:element name="usesidentifier" type="xs:string"/>
	<xs:complexType name="providesport" ecore:name="ProvidesPort">
		<xs:sequence>
			<xs:element ref="providesidentifier" ecore:name="providesIndentifier"/>
			<xs:choice>
				<xs:element ref="componentinstantiationref" ecore:name="componentInstantiationRef"/>
				<xs:element ref="devicethatloadedthiscomponentref" ecore:name="deviceThatLoadedThisComponentRef"/>
				<xs:element ref="deviceusedbythiscomponentref" ecore:name="deviceUsedByThisComponentRef"/>
				<xs:element ref="findby" ecore:name="findBy"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="providesport" type="providesport"/>
	<xs:element name="providesidentifier" type="xs:string"/>
	<xs:complexType name="componentsupportedinterface" ecore:name="ComponentSupportedInterface">
		<xs:sequence>
			<xs:element ref="supportedidentifier" ecore:name="supportedIdentifier"/>
			<xs:choice>
				<xs:element ref="componentinstantiationref" ecore:name="componentInstantiationRef"/>
				<xs:element ref="findby" ecore:name="findBy"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="componentsupportedinterface" type="componentsupportedinterface"/>
	<xs:element name="supportedidentifier" type="xs:string"/>
</xs:schema>
