#
# This file is protected by Copyright. Please refer to the COPYRIGHT file 
# distributed with this source distribution.
# 
# This file is part of REDHAWK core.
# 
# REDHAWK core is free software: you can redistribute it and/or modify it under 
# the terms of the GNU Lesser General Public License as published by the Free 
# Software Foundation, either version 3 of the License, or (at your option) any 
# later version.
# 
# REDHAWK core is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
# 
# You should have received a copy of the GNU Lesser General Public License 
# along with this program.  If not, see http://www.gnu.org/licenses/.
#

namespace urn:mil:jpeojtrs:sca:sad {
    include "map";
    include "memory";
    include "../include/ossie/SoftwareAssembly.h";
    softwareassembly "::std::auto_ptr<ossie::SoftwareAssembly::SAD>";
    componentfiles "::std::vector<ossie::ComponentFile> &";
    componentfile "::ossie::ComponentFile";
    componentplacement "const ::ossie::ComponentPlacement&" "const ::ossie::ComponentPlacement&";
    partitioning "ossie::SoftwareAssembly::Partitioning";
    hostcollocation "::ossie::SoftwareAssembly::HostCollocation";
    componentinstantiation "const ::ossie::ComponentInstantiation &" "const ::ossie::ComponentInstantiation &";
    connections "::std::vector<ossie::Connection> &";
    connectinterface "::ossie::Connection";
    usesport "::ossie::UsesPort";
    providesport "::ossie::ProvidesPort";
    componentsupportedinterface "::ossie::ComponentSupportedInterface";
    localfile "::std::string";
    description "::std::string";
    findby "::ossie::FindBy";
    namingservice "::std::string";
    domainfinder "::std::pair<std::string, std::string>";
    componentproperties "ossie::ComponentPropertyList &";
    simpleref "const ossie::SimplePropertyRef &" "const ossie::SimplePropertyRef &";
    simplesequenceref "const ossie::SimpleSequencePropertyRef &" "const ossie::SimpleSequencePropertyRef &";
    structref "const ossie::StructPropertyRef &" "const ossie::StructPropertyRef &";
    structsequenceref "const ossie::StructSequencePropertyRef &" "const ossie::StructSequencePropertyRef &";
    structvalue "const ossie::ComponentPropertyMap &" "const ossie::ComponentPropertyMap &";
    componentfileref "::std::string";
    assemblycontroller "::std::string";
    componentinstantiationref "::std::string";
    findcomponent "::std::string";
    values "::std::vector<std::string>";
    devicethatloadedthiscomponentref "::std::string";
    deviceusedbythiscomponentref "::std::pair<std::string, std::string>";
    deviceusedbyapplication "::std::string";
    externalports "::std::vector<ossie::SoftwareAssembly::Port> &";
    port "ossie::SoftwareAssembly::Port";
    usesidentifier "::std::string";
    providesidentifier "::std::string";
    supportedidentifier "::std::string";
    externalproperties "::std::vector<ossie::SoftwareAssembly::Property> &";
    property "ossie::SoftwareAssembly::Property";
    options "::std::vector<ossie::SoftwareAssembly::Option> &";
    option "ossie::SoftwareAssembly::Option";
    usesdevicedependencies "::std::vector<ossie::UsesDevice> &";
    usesdevice "ossie::UsesDevice";
    propertyref "ossie::PropertyRef";
    affinity "ossie::ComponentInstantiation::AffinityProperties&";
    loggingconfig  "const ossie::ComponentInstantiation::LoggingConfig&"  "const ossie::ComponentInstantiation::LoggingConfig&";
    devicerequires "ossie::ComponentPropertyList &" "ossie::ComponentPropertyList &";
    idvalue "const ossie::IdValue&" "const ossie::IdValue&";
    usesdeviceref "const ossie::UsesDeviceRef&" "const ossie::UsesDeviceRef&";
    reservation "const ossie::Reservation&" "const ossie::Reservation&";
}

